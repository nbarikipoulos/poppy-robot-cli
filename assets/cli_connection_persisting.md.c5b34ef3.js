import{_ as s,c as n,o as e,a as t}from"./app.96771aa4.js";const f=JSON.parse('{"title":"Persisting Settings","description":"","frontmatter":{"title":"Persisting Settings"},"headers":[],"relativePath":"cli/connection/persisting.md"}'),a={name:"cli/connection/persisting.md"},o=t(`<p>User can persist its connection settings in a rc-like file.</p><p>Create a json file named &#39;.poppyrc&#39; that respect the &#39;format&#39; below</p><div class="language-"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;host&#39;: &#39;poppy1.local&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &#39;port&#39;: 8081</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Note the poppy cli will:</p><ul><li>First check if a .poppyrc file exists, and then extract settings,</li><li>On a second hand, use the CLI settings, if any, and then it will override the corresponding values.</li></ul><p>In order to generate this file, user can call the config command with the --save flag:</p><div class="language-shell"><button class="copy"></button><span class="lang">shell</span><pre><code><span class="line"><span style="color:#A6ACCD;">poppy config --host poppy1.local -p 8081 --save</span></span>
<span class="line"></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note this command will save configuration only if the connection to the robot is successful.</p></div>`,8),l=[o];function p(c,i,r,d,_,h){return e(),n("div",null,l)}const u=s(a,[["render",p]]);export{f as __pageData,u as default};
